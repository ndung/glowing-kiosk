// ***********************************************************************
// Model	DES.CP
// Description	Include the DEA of the DES in ANSI X3.92
// ***********************************************************************
#include <memory.h>

#define LOOP 16
#define STOP 16

typedef unsigned char UCHAR;
extern UCHAR *CipherKey;
typedef union {
  unsigned Handle;
  struct {
    UCHAR Lower;
    UCHAR Upper;
  } Data;
} CONVERTER;

typedef union {
  UCHAR Array[8];
  struct {
    unsigned long L;
    unsigned long R;
  } LR;
} DATA;


// -----------------------------------------------------------------------
UCHAR IPtbl[] = {
  58, 50, 42, 34, 26, 18, 10,  2,
  60, 52, 44, 36, 28, 20, 12,  4,
  62, 54, 46, 38, 30, 22, 14,  6,
  64, 56, 48, 40, 32, 24, 16,  8,
  57, 49, 41, 33, 25, 17,  9,  1,
  59, 51, 43, 35, 27, 19, 11,  3,
  61, 53, 45, 37, 29, 21, 13,  5,
  63, 55, 47, 39, 31, 23, 15,  7};

UCHAR IPItbl[] = {
  40,  8, 48, 16, 56, 24, 64, 32,
  39,  7, 47, 15, 55, 23, 63, 31,
  38,  6, 46, 14, 54, 22, 62, 30,
  37,  5, 45, 13, 53, 21, 61, 29,
  36,  4, 44, 12, 52, 20, 60, 28,
  35,  3, 43, 11, 51, 19, 59, 27,
  34,  2, 42, 10, 50, 18, 58, 26,
  33,  1, 41,  9, 49, 17, 57, 25};

UCHAR PC1tbl[] = {
  57, 49, 41, 33, 25, 17,  9,
   1, 58, 50, 42, 34, 26, 18,
  10,  2, 59, 51, 43, 35, 27,
  19, 11,  3, 60, 52, 44, 36,
  0, 0, 0, 0,

  63, 55, 47, 39, 31, 23, 15,
   7, 62, 54, 46, 38, 30, 22,
  14,	6, 61, 53, 45, 37, 29,
  21, 13,  5, 28, 20, 12,  4,
  0, 0, 0, 0};

#define GAP 4
UCHAR PC2tbl[] = {
  14, 17, 11, 24,  1,  5,0,0,
   3, 28, 15,  6, 21, 10,0,0,
  23, 19, 12,  4, 26,  8,0,0,
  16,  7, 27, 20, 13,  2,0,0,

  41+GAP, 52+GAP, 31+GAP, 37+GAP, 47+GAP, 55+GAP,0,0,
  30+GAP, 40+GAP, 51+GAP, 45+GAP, 33+GAP, 48+GAP,0,0,
  44+GAP, 49+GAP, 39+GAP, 56+GAP, 34+GAP, 53+GAP,0,0,
  46+GAP, 42+GAP, 50+GAP, 36+GAP, 29+GAP, 32+GAP,0,0};

UCHAR Etbl[] = {
  32,  1,  2,  3,  4,  5,0,0,
   4,  5,  6,  7,  8,  9,0,0,
   8,  9, 10, 11, 12, 13,0,0,
  12, 13, 14, 15, 16, 17,0,0,
  16, 17, 18, 19, 20, 21,0,0,
  20, 21, 22, 23, 24, 25,0,0,
  24, 25, 26, 27, 28, 29,0,0,
  28, 29, 30, 31, 32,  1,0,0};

UCHAR Ptbl[] = {
  16,  7, 20, 21, 29, 12, 28, 17,
   1, 15, 23, 26,  5, 18, 31, 10,
   2,  8, 24, 14, 32, 27,  3,  9,
  19, 13, 30,  6, 22, 11,  4, 25};

UCHAR Bittbl[] = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};

void Permut(UCHAR *InData, UCHAR *OutData, UCHAR *MAPtbl, int Bits) {
  int i, j, k, l;
  int OutByte, OutBit;

  OutByte = Bits/8;
  for(k=0; k<OutByte; k++) OutData[k] = 0;

  k=0;
  for(i=0; i<OutByte; i++) {
    for(OutBit=0; OutBit<8; OutBit++, k++) {
      if(MAPtbl[k]==0) continue;
      l = (MAPtbl[k]-1)/8;
      j = (MAPtbl[k]-1)%8;

      if((InData[l]&Bittbl[j])==0) continue;
      OutData[i] |= Bittbl[OutBit];
    }
  }
}

// -----------------------------------------------------------------------
UCHAR LStbl[] = {1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};

void LS(UCHAR *Data, int Level) {
  UCHAR Temp;
  CONVERTER Con;
  int i, j, k;

  i = LStbl[Level];

  for(k=0; k<8; k+=4) {
    Temp = Data[k];
    for(j=0; j<3; j++) {
      Con.Data.Upper = Data[k+j];
      Con.Data.Lower = Data[k+j+1];
      Con.Handle <<= i;
      Data[k+j] = Con.Data.Upper;
    }
    Con.Data.Upper = Data[k+3]>>4;
    Con.Data.Lower = Temp;
    Con.Handle <<= i;
    Data[k+3] = Con.Data.Upper<<4;
  }
}

// -----------------------------------------------------------------------
void RS(UCHAR *OutData, int Level) {
  UCHAR Temp;
  CONVERTER Con;
  int i, j, k;

  j = LStbl[Level];
  for(k=3; k<8; k+=4) {
    Temp = OutData[k];
    for(i=0; i<3; i++) {
      Con.Data.Upper = OutData[k-i-1];
      Con.Data.Lower = OutData[k-i];
      Con.Handle >>= j;
      OutData[k-i] = Con.Data.Lower;
    }
    Con.Data.Upper = Temp>>4;
    Con.Data.Lower = OutData[k-3];
    Con.Handle >>= j;
    OutData[k-3] = Con.Data.Lower;
    OutData[k] &= 0xf0;
  }
}

// -----------------------------------------------------------------------
UCHAR Stbl[8][4][16] = {
  14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,
   0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
   4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
  15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13,

  15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,
   3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
   0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
  13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9,

  10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,
  13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
  13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
   1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12,

   7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15,
  13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
  10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
   3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14,

   2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9,
  14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
   4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
  11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3,

  12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,
  10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
   9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
   4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13,

   4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,
  13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
   1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
   6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12,

  13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,
   1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
   7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
   2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11};

void S(UCHAR *InData, UCHAR *OutData) {
  CONVERTER Con;
  int i;
  UCHAR Temp;

  for(i=0; i<4; i++) OutData[i] = 0;
  for(i=0; i<8; i++) {
    Con.Handle = 0;
    Con.Data.Lower = InData[i];
    Con.Handle <<=1;
    Con.Data.Lower <<=4;
    Con.Handle <<=1;
    Temp = (InData[i]>>3)&0x0f;
    Temp = Stbl[i][Con.Data.Upper][Temp];
    if(i%2==0) Temp <<= 4;
    OutData[i/2] |= Temp;
  }
}

// -----------------------------------------------------------------------
void Encrypt(UCHAR *Data) {
  DATA TData1, TData2;
  DATA TKey1, TKey2;
  DATA TLR;
  int i;

  Permut(Data, TData2.Array, IPtbl, 64);	    // L0 R0

  Permut(CipherKey, TKey2.Array, PC1tbl, 64);	    // C0 D0

  for(i=0; i<LOOP; i++) {
    LS(TKey2.Array, i); 			    // LSi
    Permut(TKey2.Array, TKey1.Array, PC2tbl, 64);   // Ki, Ci Di
    TLR.LR.R = TData2.LR.R;			    // Ri-1
    TLR.LR.L = TData2.LR.L;			    // Li-1

    Permut((UCHAR *)&(TLR.LR.R), TData2.Array, Etbl, 64);
    TData2.LR.L ^= TKey1.LR.L;
    TData2.LR.R ^= TKey1.LR.R;

    S(TData2.Array, TData1.Array);
    memcpy(Data, TData1.Array, 4);
    if(i==STOP) return;
    Permut(TData1.Array, (UCHAR *)&(TData2.LR.R), Ptbl, 32);

    TData2.LR.R ^= TLR.LR.L;			    // Ri = Li-1 + F(Ri-1, Ki)
    TData2.LR.L = TLR.LR.R;			    // Li = Ri-1
  }
  TData2.LR.L = TData2.LR.R;
  TData2.LR.R = TLR.LR.R;
  Permut(TData2.Array, Data, IPItbl, 64);
}

// -----------------------------------------------------------------------
void Decrypt(UCHAR *Data) {
  DATA TData1, TData2;
  DATA TKey1, TKey2;
  DATA TLR;
  int i;

  Permut(Data, TData2.Array, IPtbl, 64);	      // L0 R0

  Permut(CipherKey, TKey2.Array, PC1tbl, 64);	      // C0 D0
  for(i=0; i<LOOP; i++) LS(TKey2.Array, i);	      // C16 D16

  for(i=LOOP-1; i>=0; i--) {
    Permut(TKey2.Array, TKey1.Array, PC2tbl, 64);   // Ki, Ci Di
    TLR.LR.R = TData2.LR.R;			    // Ri-1
    TLR.LR.L = TData2.LR.L;			    // Li-1

    // F(Ri-1, ki);
    Permut((UCHAR *)&(TLR.LR.R), TData2.Array, Etbl, 64);
    TData2.LR.L ^= TKey1.LR.L;
    TData2.LR.R ^= TKey1.LR.R;

    S(TData2.Array, TData1.Array);
    Permut(TData1.Array, (UCHAR *)&(TData2.LR.R), Ptbl, 32);

    TData2.LR.R ^= TLR.LR.L;			    // Ri = Li-1 + F(Ri-1, Ki)
    TData2.LR.L = TLR.LR.R;			    // Li = Ri-1
    RS(TKey2.Array, i); 			    // LSi
  }
  TData2.LR.L = TData2.LR.R;
  TData2.LR.R = TLR.LR.R;
  Permut(TData2.Array, Data, IPItbl, 64);
}

// -----------------------------------------------------------------------
